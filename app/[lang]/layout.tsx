import type { Metadata } from "next";
import { Inter, Montserrat } from "next/font/google";
import "../globals.css";
import Header from "@/components/header";
import { ThemeProvider } from "@/providers/ThemeProvider";
import Footer from "@/components/footer";
import { Locale, i18n } from "@/i18n.config";
import { getDictionary } from "@/lib/dictionary";

const inter = Inter({ subsets: ["latin"] });
const montserrat = Montserrat({
  subsets: ["latin"],
  display: "block",
  weight: ["100", "300", "400", "900", "700"],
  variable: "--font-montserrat",
});

export const metadata: Metadata = {
  title: "Clone of Corus",
  description: "Generated by create next app",
};

export type SubLinksType = {
  title: string;
  subLinks: {
    title: string;
    href: string;
  }[];
};
export default async function RootLayout({
  children,
  params,
}: {
  children: React.ReactNode;
  params: { lang: Locale };
}) {
  const dictionary = await getDictionary(params.lang);

  const navSubLinks: SubLinksType[] = [
    {
      title: dictionary.navigation["solutions-nav"],
      subLinks: [
        {
          title: dictionary.navigation["integration-api"],
          href: `/${params.lang}/solutions/integration-api`,
        },
        {
          title: dictionary.navigation["process"],
          href: `/${params.lang}/solutions/process`,
        },
        {
          title: dictionary.navigation["iot-ai"],
          href: `/${params.lang}/solutions/iot-ai`,
        },
        {
          title: dictionary.navigation["ux"],
          href: `/${params.lang}/solutions/ux`,
        },
        {
          title: dictionary.navigation["cms"],
          href: `/${params.lang}/solutions/cms`,
        },
        {
          title: dictionary.navigation["video"],
          href: `/${params.lang}/solutions/video`,
        },
        {
          title: dictionary.navigation["develop"],
          href: `/${params.lang}/solutions/develop`,
        },
        {
          title: dictionary.navigation["qa"],
          href: `/${params.lang}/solutions/qa`,
        },
      ],
    },
    {
      title: dictionary.navigation["sectors-nav"],
      subLinks: [
        {
          title: dictionary.navigation["finance"],
          href: `/${params.lang}/sectors/finance`,
        },
        {
          title: dictionary.navigation["insurance"],
          href: `/${params.lang}/sectors/insurance`,
        },
        {
          title: dictionary.navigation["healthcare"],
          href: `/${params.lang}/sectors/healthcare`,
        },
        {
          title: dictionary.navigation["industry"],
          href: `/${params.lang}/sectors/industry`,
        },
        {
          title: dictionary.navigation["media"],
          href: `/${params.lang}/sectors/media`,
        },
        {
          title: dictionary.navigation["consumer"],
          href: `/${params.lang}/sectors/consumer`,
        },
      ],
    },
    {
      title: dictionary.navigation["us-nav"],
      subLinks: [
        {
          title: dictionary.navigation["about-us"],
          href: `/${params.lang}/us/about-us`,
        },
        {
          title: dictionary.navigation["partners"],
          href: `/${params.lang}/us/partners`,
        },
      ],
    },
    {
      title: dictionary.navigation["positions-nav"],
      subLinks: [
        {
          title: dictionary.navigation["positions"],
          href: `/${params.lang}/positions`,
        },
        {
          title: dictionary.navigation["position-position"],
          href: `/${params.lang}/positions/#positions`,
        },
      ],
    },
  ];

  return (
    <html lang={params.lang} suppressHydrationWarning>
      <body
        className={`${montserrat.variable} font-montserrat max-xxs:hyphens-auto`}
      >
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          // enableSystem
          // disableTransitionOnChange
        >
          <Header
            lang={params.lang}
            dictionary={dictionary}
            navSubLinks={navSubLinks}
          />

          <div className="bg-white dark:bg-dark">
            {/* <svg height="500" width="500" className="scale-50  ">
              <polygon
                points="250,0 0,500 500,500" //
                className="triangle fill-transparent stroke-black stroke-[4px]"
              />
              Sorry, your browser does not support inline SVG.
            </svg>

            <div className="border:dark relative mx-auto h-[200px] w-[200px] border-2 border-white bg-dark opacity-70 ">
              <svg
                height="20"
                width="20"
                className=" absolute bottom-[100%] left-[10%] right-0   fill-dark "
              >
                <polyline
                  points="0,20 10,0  20,20" //
                  className="triangle  stroke-white stroke-[4px]"
                />
                Sorry, your browser does not support inline SVG.
              </svg>
            </div> */}
            {children}
          </div>
          <Footer lang={params.lang} dictionary={dictionary} />
        </ThemeProvider>
      </body>
    </html>
  );
}
